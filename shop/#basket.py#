from datetime import timedelta

from django.utils.datastructures import DotExpandedDict
from django.views.generic import TemplateView
from django.shortcuts import redirect

from models import Variant, OrderedWare
from forms import OrderForm

class Basket(object):
    model = Variant
    def __init__(self, request):
        request.session.set_expiry(timedelta(days=30))
        self.request = request
        self.basket = request.session.setdefault('basket', {'contents': {}, 'sum': 0})

    def reset(self):
        del self.request.session['basket']

    def get_contents(self):
        return [(v,self.basket['contents'].get(v.id), v.price*self.basket['contents'].get(v.id)) \
                for v in self.model.objects.select_related().filter(id__in=self.basket['contents'].keys())]
b
    def get(self):
        return self.basket

    def remove(self, id):
        del self.request.session['basket']['contents'][id]
        self.save()

    def put(self, id, qty=1):
        self.basket['contents'].setdefault(id, 0)
        obj = self.model.objects.get(id=id)
        self.basket['contents'][id] += qty
        self.basket['sum'] += qty * obj.price
        self.save()

    def change(self, id, qty):
        oldval = self.basket['contents'][id]
        self.basket['contents'][id] = qty
        return oldval != qty

    def save(self):
        self.request.session['basket'] = self.basket

    def recalculate(self):
        return sum([p for _,_,p in self.get_contents()])

class BasketView(TemplateView):
    template_name = 'shop/basket.html'

    def get(self, request, *args, **kwargs):
        self.order_form = OrderForm()
        if 'id' in request.GET:
            basket = Basket(request)
            try:
                basket.remove(int(request.GET['id']))
            except ValueError:
                pass
            return redirect(request.path)
        return super(BasketView, self).get(request, *args, **kwargs)

    def render_to_response(self, context, **kwargs):
        context['order_form'] = self.order_form
        return super(BasketView, self).render_to_response(context, **kwargs)

    def post(self, request, *args, **kwargs):
        self.order_form = OrderForm(request.POST)
        basket = Basket(request)
        if 'next' in request.POST:
            try:
                basket.put(id=int(request.POST.get('id')), qty=int(request.POST.get('qty', 1)))
            except ValueError:
                pass
            return redirect(request.POST.get('next'))
        else:
            changed = False
            for k,v in DotExpandedDict(request.POST)['variant'].items():
                changed = changed or basket.change(int(k),int(v))
            basket.recalculate()
            basket.save()
            if not changed:
                if self.order_form.is_valid():
                    # process order
                    instance = self.order_form.save()
                    for variant, qty, _ in basket.get_contents():
                        OrderedWare.objects.create(
                            variant = variant,
                            qty = qty,
                            order = instance
                        )
                    basket.reset()
                    instance.send_notification()
                    return self.render_to_response({'complete': True})
                else:
                    return self.render_to_response({'complete': False})
                    #return super(BasketView, self).post(request, *args, **kwargs)
            return redirect(request.path)

